---
import type { CollectionEntry, ReferenceDataEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import Breadcrumbs from "../components/Breadcrumbs.astro";
import DemoContainer from "../components/DemoContainer.astro";
import ExtendedLayout from "./ExtendedLayout.astro";
import { getEntry, type CollectionKey, type DataEntryMap } from "astro:content";
import FileBrowser from "../components/FileBrowser.astro";
import path from "node:path";
import Chip from "../components/Chip.astro";
import { getSnippetWrapper } from "../../generated/snippet-wrappers";
import { escapeString } from "../utils/escape-string";

type Props = CollectionEntry<"snippets">["data"] & { slug: string };

function relativeEntryToSlug(
	slug: string,
	entry: ReferenceDataEntry<"snippetImplementations", string>,
) {
	const slugDirectory = path.parse(slug).dir;
	const id = path.join(slugDirectory, entry.id);
	return { ...entry, id };
}

async function getEntries<
	C extends CollectionKey,
	E extends keyof DataEntryMap[C] = string,
>(refs: ReferenceDataEntry<C, E>[] | undefined) {
	return refs ? await Promise.all(refs.map((s) => getEntry(s))) : [];
}

function arrayify<T>(input: T | T[]) {
	return (Array.isArray(input) ? input : [input]).filter(
		(a) => a !== undefined,
	);
}

const {
	title,
	description,
	implementation: implementationRef,
	dependencies: dependencyRefs,
	usage: usageRef,
	slug,
	collection: collectionRef,
} = Astro.props;

const entry = relativeEntryToSlug.bind(null, slug);

const dependencies = await getEntries(dependencyRefs?.map(entry));
const usage = await getEntries(arrayify(usageRef).map(entry));

const implementation = await getEntries(arrayify(implementationRef).map(entry));
const files = [...implementation, ...dependencies].filter(Boolean);

const collection = collectionRef && (await getEntry(collectionRef));
const defaultUsageFile = usage[0]?.id;
const usageComponents = await Promise.all(
	usage.map(async (file) => ({
		Component: getSnippetWrapper(file.id),
		id: file.id,
	})),
);
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
  </head>

  <body>
    <ExtendedLayout>
      <Header />
      <Breadcrumbs
        items={[
          { href: "/", label: "Home" },
          { href: "/snippets", label: "Snippets" },
          { label: title },
        ]}
        class="mt-4"
      />
      <main
        class="prose prose-h2:font-semibold prose-h1:font-bold prose-h1:text-2xl prose-h2:text-lg prose-invert prose-stone pt-8 max-w-full"
      >
        <h1 class="!mb-3">{title}</h1>
        <div class="space-x-4">
          {collection && (
            <Chip colour={collection.data.colour}>
              {collection.data.id}
            </Chip>
          )}
        </div>
        <!-- <SplitLayout> -->

        <article class="min-w-0" x-data=`{ activeUsageFile: '${defaultUsageFile}' }`>
          <slot />
          <h2>Usage</h2>
          <FileBrowser
            files={usage.map((file) => ({
              path: file?.id,
              code: file?.data.code,
            }))}
            config={{ lang: "tsx" }}
            dataId="activeUsageFile"
          />

          <!-- <div class="w-64 shrink-0" slot="sidebar">Sidebar content</div> -->
        <!-- </SplitLayout> -->
          {usageComponents.map((usage) => 
            <div class="mt-2" x-show=`activeUsageFile === '${escapeString(usage.id)}'`>
              <DemoContainer name={usage.id}>
                <usage.Component />
              </DemoContainer>
            </div>
          )}

          <h2>Implementation</h2>
          <FileBrowser
            files={files.map((file) => ({
              path: file?.id,
              code: file?.data.code,
            }))}
            config={{ lang: "tsx" }}
          />
          <Footer />
        </article>
      </main>
    </ExtendedLayout>
  </body>
</html>
