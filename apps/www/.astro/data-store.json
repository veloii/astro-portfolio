[["Map",1,2,9,10,19,198],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.3.0","content-config-digest","7892985c6366a3df","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://veloi.me\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"vesper\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","snippets",["Map",11,12,35,36,54,55,78,79,102,103,125,126,152,153,175,176],"dimensions",{"id":11,"data":13,"body":20,"filePath":21,"digest":22,"rendered":23,"legacyId":34},{"title":14,"description":15,"pubDate":16,"implementation":17},"Dimensions","Helpers to infer height and width of any dimensions",["Date","2025-02-22T00:00:00.000Z"],{"id":18,"collection":19},"dimensions.ts","snippetImplementations","## Context\n\nAllows any variant of dimensions to be accepted in your application code.\nThis is mainly used as a shared dependency of other snippets interacting with dimensions.","src/content/snippets/dimensions.md","a0b6c199972bf100",{"html":24,"metadata":25},"\u003Ch2 id=\"context\">Context\u003C/h2>\n\u003Cp>Allows any variant of dimensions to be accepted in your application code.\nThis is mainly used as a shared dependency of other snippets interacting with dimensions.\u003C/p>",{"headings":26,"imagePaths":31,"frontmatter":32},[27],{"depth":28,"slug":29,"text":30},2,"context","Context",[],{"title":14,"description":15,"pubDate":33,"implementation":18},"Feb 22 2025","dimensions.md","state-serialization",{"id":35,"data":37,"body":43,"filePath":44,"digest":45,"rendered":46,"legacyId":53},{"title":38,"description":39,"pubDate":40,"implementation":41},"State Serialization","De/serialize your state I/O of safe JSON",["Date","2025-02-22T00:00:00.000Z"],{"id":42,"collection":19},"state-serialization.ts","## Context\n\nAllows for safe serialization of any kind of state within your application for storing.\nIt comes with basic `include` and `exclude` options to omit keys you don't want to serialize.","src/content/snippets/state-serialization.md","f00efe183d39128e",{"html":47,"metadata":48},"\u003Ch2 id=\"context\">Context\u003C/h2>\n\u003Cp>Allows for safe serialization of any kind of state within your application for storing.\nIt comes with basic \u003Ccode>include\u003C/code> and \u003Ccode>exclude\u003C/code> options to omit keys you don’t want to serialize.\u003C/p>",{"headings":49,"imagePaths":51,"frontmatter":52},[50],{"depth":28,"slug":29,"text":30},[],{"title":38,"description":39,"pubDate":33,"implementation":42},"state-serialization.md","react/detect-sticky",{"id":54,"data":56,"body":66,"filePath":67,"digest":68,"rendered":69,"legacyId":77},{"title":57,"description":58,"usage":59,"pubDate":61,"tags":62,"implementation":64},"React Detect Sticky","Watch for sticky elements being hoisted",{"id":60,"collection":19},"use-detect-sticky.example.tsx",["Date","2025-02-22T00:00:00.000Z"],[63],"react",{"id":65,"collection":19},"use-detect-sticky.ts","## Context\n\nA basic hook to watch for when sticky elements are hoisted to their set position. This is useful for conditionally showing \"Scroll to top\" buttons.\n\nThe caveat is the sticky element must have a `-1px` offset.","src/content/snippets/react/detect-sticky.md","6ef27f5043e3215c",{"html":70,"metadata":71},"\u003Ch2 id=\"context\">Context\u003C/h2>\n\u003Cp>A basic hook to watch for when sticky elements are hoisted to their set position. This is useful for conditionally showing “Scroll to top” buttons.\u003C/p>\n\u003Cp>The caveat is the sticky element must have a \u003Ccode>-1px\u003C/code> offset.\u003C/p>",{"headings":72,"imagePaths":74,"frontmatter":75},[73],{"depth":28,"slug":29,"text":30},[],{"title":57,"description":58,"pubDate":33,"tags":76,"implementation":65,"usage":60},[63],"react/detect-sticky.md","zustand/draft-store",{"id":78,"data":80,"body":90,"filePath":91,"digest":92,"rendered":93,"legacyId":101},{"title":81,"description":82,"usage":83,"pubDate":85,"tags":86,"implementation":88},"Zustand Draft Store","Update your store in batch through a clone",{"id":84,"collection":19},"draft-store.example.tsx",["Date","2025-02-22T00:00:00.000Z"],[87],"zustand",{"id":89,"collection":19},"draft-store.tsx","## Context\n\nThis allows for a store to be updated in batch by modifying state in a cloned store and pushing to the original store when ready.\n\nThis is particularly useful in user interfaces when you don't want updates to a store in a UI to proprogate before the user has finished.\n\n- `createDraftStore` will immediately wrap and create a copy of the store with the additional methods.\n- `createDraftStoreContext` will call `createDraftStore` within a React provider.\n\nIf the original store is modifed when a draft store instance is living, the draft store will _not_ be updated.\n\nOn `push()`, the **entire** store will be updated, including state that has _not_ been modified.","src/content/snippets/zustand/draft-store.md","42394c8ab54b8a1a",{"html":94,"metadata":95},"\u003Ch2 id=\"context\">Context\u003C/h2>\n\u003Cp>This allows for a store to be updated in batch by modifying state in a cloned store and pushing to the original store when ready.\u003C/p>\n\u003Cp>This is particularly useful in user interfaces when you don’t want updates to a store in a UI to proprogate before the user has finished.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>createDraftStore\u003C/code> will immediately wrap and create a copy of the store with the additional methods.\u003C/li>\n\u003Cli>\u003Ccode>createDraftStoreContext\u003C/code> will call \u003Ccode>createDraftStore\u003C/code> within a React provider.\u003C/li>\n\u003C/ul>\n\u003Cp>If the original store is modifed when a draft store instance is living, the draft store will \u003Cem>not\u003C/em> be updated.\u003C/p>\n\u003Cp>On \u003Ccode>push()\u003C/code>, the \u003Cstrong>entire\u003C/strong> store will be updated, including state that has \u003Cem>not\u003C/em> been modified.\u003C/p>",{"headings":96,"imagePaths":98,"frontmatter":99},[97],{"depth":28,"slug":29,"text":30},[],{"title":81,"description":82,"pubDate":33,"tags":100,"implementation":89,"usage":84},[87],"zustand/draft-store.md","zustand/super-json",{"id":102,"data":104,"body":113,"filePath":114,"digest":115,"rendered":116,"legacyId":124},{"title":105,"description":106,"usage":107,"pubDate":109,"tags":110,"implementation":111},"Zustand Superjson Storage","Safely store non-primitive types in a store",{"id":108,"collection":19},"superjson.example.ts",["Date","2025-02-22T00:00:00.000Z"],[87],{"id":112,"collection":19},"superjson.ts","## Context\n\nSame API as the built-in `createJSONStorage()` but with `superjson`.\n\nThis means `Date`, `Map`, `Set` and `BigInt` can be safely stored.","src/content/snippets/zustand/super-json.md","9e9c871dca5ffe22",{"html":117,"metadata":118},"\u003Ch2 id=\"context\">Context\u003C/h2>\n\u003Cp>Same API as the built-in \u003Ccode>createJSONStorage()\u003C/code> but with \u003Ccode>superjson\u003C/code>.\u003C/p>\n\u003Cp>This means \u003Ccode>Date\u003C/code>, \u003Ccode>Map\u003C/code>, \u003Ccode>Set\u003C/code> and \u003Ccode>BigInt\u003C/code> can be safely stored.\u003C/p>",{"headings":119,"imagePaths":121,"frontmatter":122},[120],{"depth":28,"slug":29,"text":30},[],{"title":105,"description":106,"pubDate":33,"tags":123,"implementation":112,"usage":108},[87],"zustand/super-json.md","zustand/url",{"id":125,"data":127,"body":139,"filePath":140,"digest":141,"rendered":142,"legacyId":151},{"title":128,"description":129,"usage":130,"pubDate":132,"tags":133,"dependencies":134,"implementation":137},"Zustand URL Storage","Store your store's state in a search parameter",{"id":131,"collection":19},"url.example.ts",["Date","2025-02-22T00:00:00.000Z"],[87],[135],{"id":136,"collection":19},"../state-serialization.ts",{"id":138,"collection":19},"url.ts","## Context\n\nAllows you to store your state within `window.location.search`. It uses the `state-serialization` snippet, which utilizes `superjson` (_subject to change_) for stringifying and parsing.\nThis means `Date`, `Map`, `Set` and `BigInt` can be safely stored.","src/content/snippets/zustand/url.md","6570f611d0c3cf86",{"html":143,"metadata":144},"\u003Ch2 id=\"context\">Context\u003C/h2>\n\u003Cp>Allows you to store your state within \u003Ccode>window.location.search\u003C/code>. It uses the \u003Ccode>state-serialization\u003C/code> snippet, which utilizes \u003Ccode>superjson\u003C/code> (\u003Cem>subject to change\u003C/em>) for stringifying and parsing.\nThis means \u003Ccode>Date\u003C/code>, \u003Ccode>Map\u003C/code>, \u003Ccode>Set\u003C/code> and \u003Ccode>BigInt\u003C/code> can be safely stored.\u003C/p>",{"headings":145,"imagePaths":147,"frontmatter":148},[146],{"depth":28,"slug":29,"text":30},[],{"title":128,"description":129,"pubDate":33,"tags":149,"dependencies":150,"implementation":138,"usage":131},[87],[136],"zustand/url.md","react/scroll-threshold",{"id":152,"data":154,"body":163,"filePath":164,"digest":165,"rendered":166,"legacyId":174},{"title":155,"description":156,"usage":157,"pubDate":159,"tags":160,"implementation":161},"React Scroll Threshold","Performantly check the scroll position of an element",{"id":158,"collection":19},"use-scroll-threshold.example.tsx",["Date","2025-02-22T00:00:00.000Z"],[63],{"id":162,"collection":19},"use-scroll-threshold.ts","## Context\n\nBasic hook to check if scroll position of the specified element ref has exceeded a threshold. If an elements is not specified, `window.scrollY` is used. The threshold is _not_ inclusive.\n\nThis hook will default to `false` when used in a server-side rendering environment and only update when hooks run on the client.\n\nThe advantage to this hook is it that does not cause unnecessary re-renders when scrolling; it does the scroll comparison outside of React.","src/content/snippets/react/scroll-threshold.md","1b25935722ad3300",{"html":167,"metadata":168},"\u003Ch2 id=\"context\">Context\u003C/h2>\n\u003Cp>Basic hook to check if scroll position of the specified element ref has exceeded a threshold. If an elements is not specified, \u003Ccode>window.scrollY\u003C/code> is used. The threshold is \u003Cem>not\u003C/em> inclusive.\u003C/p>\n\u003Cp>This hook will default to \u003Ccode>false\u003C/code> when used in a server-side rendering environment and only update when hooks run on the client.\u003C/p>\n\u003Cp>The advantage to this hook is it that does not cause unnecessary re-renders when scrolling; it does the scroll comparison outside of React.\u003C/p>",{"headings":169,"imagePaths":171,"frontmatter":172},[170],{"depth":28,"slug":29,"text":30},[],{"title":155,"description":156,"pubDate":33,"tags":173,"implementation":162,"usage":158},[63],"react/scroll-threshold.md","zustand/provider",{"id":175,"data":177,"body":186,"filePath":187,"digest":188,"rendered":189,"legacyId":197},{"title":178,"description":179,"usage":180,"pubDate":182,"tags":183,"implementation":184},"Zustand Store Provider","Wrapper to scope your stores via a React context",{"id":181,"collection":19},"provider.example.tsx",["Date","2025-02-22T00:00:00.000Z"],[87],{"id":185,"collection":19},"provider.tsx","## Context\n\nThis allows for your stores to be scoped via a React context. It exports a function to wrap your store with any arguments being forwarded through props.\n\nThe default behaviour of the exported `use` hook will throw if no provider is in scope.\n\nIf you need direct access to the `StoreApi`, you can `.useRoot()` on the hook. This is rarely necessary and only needed for using `.getState` and `.setState` on the store.","src/content/snippets/zustand/provider.md","c341c8edf621e65b",{"html":190,"metadata":191},"\u003Ch2 id=\"context\">Context\u003C/h2>\n\u003Cp>This allows for your stores to be scoped via a React context. It exports a function to wrap your store with any arguments being forwarded through props.\u003C/p>\n\u003Cp>The default behaviour of the exported \u003Ccode>use\u003C/code> hook will throw if no provider is in scope.\u003C/p>\n\u003Cp>If you need direct access to the \u003Ccode>StoreApi\u003C/code>, you can \u003Ccode>.useRoot()\u003C/code> on the hook. This is rarely necessary and only needed for using \u003Ccode>.getState\u003C/code> and \u003Ccode>.setState\u003C/code> on the store.\u003C/p>",{"headings":192,"imagePaths":194,"frontmatter":195},[193],{"depth":28,"slug":29,"text":30},[],{"title":178,"description":179,"pubDate":33,"tags":196,"implementation":185,"usage":181},[87],"zustand/provider.md",["Map",18,199,42,202,205,206,209,210,213,214,217,218,221,222,225,226,229,230,233,234,237,238,241,242,245,246,249,250],{"id":18,"data":200},{"code":201},"export type AnyDimensions =\n  | { width: number; height: number; aspectRatio?: undefined }\n  | { width: number; aspectRatio: number; height?: undefined }\n  | { height: number; aspectRatio: number; width?: undefined };\n\nexport type SizeDimensions = { width: number; height: number };\n\nexport function sizeDimensions(dimensions: AnyDimensions): SizeDimensions {\n  if (dimensions.aspectRatio !== undefined) {\n    if (dimensions.width !== undefined) {\n      return {\n        width: dimensions.width,\n        height: Math.ceil(dimensions.width * dimensions.aspectRatio),\n      };\n    }\n\n    if (dimensions.height !== undefined) {\n      return {\n        height: dimensions.height,\n        width: Math.ceil(dimensions.height * dimensions.aspectRatio),\n      };\n    }\n  }\n\n  return dimensions;\n}\n",{"id":42,"data":203},{"code":204},"import superjson from \"superjson\";\nimport type { z } from \"zod\";\n\nexport type URLSerializeOptions\u003CT> = {\n  baseURL?: string;\n  paramName?: string;\n} & SerializeOptions\u003CT>;\n\nexport type SerializeOptions\u003CT> = {\n  include?: (keyof T)[];\n  exclude?: (keyof T)[];\n};\n\nexport type StateSerializer\u003CState> = {\n  createURL(state: State, options?: URLSerializeOptions\u003CState>): string;\n  createString(state: State, options?: SerializeOptions\u003CState>): string;\n};\n\nexport const createStateSerializer = \u003C\n  TSchema extends z.ZodType,\n  State extends z.infer\u003CTSchema> = z.infer\u003CTSchema>,\n>(\n  schema: TSchema,\n): StateSerializer\u003CState> => {\n  const createString: StateSerializer\u003CState>[\"createString\"] = (\n    state,\n    options,\n  ) => {\n    let filteredState = { ...state };\n\n    if (options?.include?.length) {\n      filteredState = Object.fromEntries(\n        Object.entries(filteredState).filter(([key]) =>\n          options.include?.includes(key as keyof State),\n        ),\n      ) as State;\n    }\n\n    if (options?.exclude?.length) {\n      filteredState = Object.fromEntries(\n        Object.entries(filteredState).filter(\n          ([key]) => !options.exclude?.includes(key as keyof State),\n        ),\n      ) as State;\n    }\n\n    const validated = schema.parse(filteredState);\n    return superjson.stringify(validated);\n  };\n\n  return {\n    createString,\n    createURL: (state, options): string => {\n      const paramName = options?.paramName || \"state\";\n      const url = options?.baseURL || window.location.pathname;\n      const parameters = new URLSearchParams(url);\n      const [pathname] = url.split(\"?\");\n      const serialized = createString(state, options);\n      parameters.append(paramName, serialized);\n      return `${pathname}?${parameters.toString()}`;\n    },\n  };\n};\n\nexport const createStateDeserializer = \u003C\n  TSchema extends z.ZodType,\n  State extends z.infer\u003CTSchema> = TSchema,\n>(\n  schema: TSchema,\n) => ({\n  fromString(\n    stringifiedState: string | null | undefined,\n    defaultValue?: State,\n  ):\n    | { error: Error; success: false; data?: undefined }\n    | { error?: undefined; data: State; success: true } {\n    try {\n      if (stringifiedState === null) {\n        if (defaultValue !== undefined) {\n          return { data: defaultValue, error: undefined, success: true };\n        }\n\n        throw new Error(\"state is null\");\n      }\n      if (stringifiedState === undefined) {\n        if (defaultValue !== undefined) {\n          return { data: defaultValue, error: undefined, success: true };\n        }\n\n        throw new Error(\"state is undefined\");\n      }\n\n      const decoded = decodeURIComponent(stringifiedState);\n      const parsed = superjson.parse(decoded);\n      return schema.safeParse(parsed);\n    } catch (error) {\n      if (!(error instanceof Error)) {\n        return { error: new Error(String(error)), success: false };\n      }\n\n      return { error, success: false };\n    }\n  },\n});\n","react/use-detect-sticky.example.tsx",{"id":205,"data":207},{"code":208},"import { useRef } from \"react\";\nimport useDetectSticky from \"./use-detect-sticky\";\n\nfunction Component() {\n  const element = useRef\u003CHTMLDivElement>(null);\n  const hasScrolled = useDetectSticky(element);\n\n  return (\n    \u003Cdiv className=\"overflow-y-auto h-[500px]\">\n      {/* -top-px is important */}\n      \u003Cdiv className=\"sticky -top-px\" ref={element}>\n        {hasScrolled && \"You've scrolled\"}\n      \u003C/div>\n    \u003C/div>\n  );\n}\n","react/use-detect-sticky.ts",{"id":209,"data":211},{"code":212},"import { useEffect, useState } from \"react\";\n\nexport default function useDetectSticky(\n  ref: React.RefObject\u003CHTMLElement | null>,\n) {\n  const [isSticky, setIsSticky] = useState(false);\n\n  useEffect(() => {\n    if (!ref.current) return;\n\n    const cachedRef = ref.current;\n    const observer = new IntersectionObserver(\n      ([e]) => {\n        if (!e) return;\n        setIsSticky(e.intersectionRatio \u003C 1);\n      },\n      { threshold: 1 },\n    );\n\n    observer.observe(cachedRef);\n\n    return () => observer.unobserve(cachedRef);\n  }, [ref.current]);\n\n  return isSticky;\n}\n","react/use-scroll-threshold.example.tsx",{"id":213,"data":215},{"code":216},"import { useRef } from \"react\";\nimport useScrollThreshold from \"./use-scroll-threshold\";\n\nfunction Component() {\n  const element = useRef\u003CHTMLDivElement>(null);\n  const hasScrolled = useScrollThreshold(100, element);\n\n  return (\n    \u003Cdiv className=\"overflow-y-auto h-[200px]\" ref={element}>\n      \u003Cdiv className=\"h-[500px] grid place-items-center\">\n        {hasScrolled && \"You've scrolled\"}\n      \u003C/div>\n    \u003C/div>\n  );\n}\n","react/use-scroll-threshold.ts",{"id":217,"data":219},{"code":220},"import { type RefObject, useEffect, useState } from \"react\";\n\nexport default function useScrollThreshold(\n  threshold: number,\n  ref: RefObject\u003CHTMLElement | null> | null,\n) {\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  useEffect(() => {\n    if (ref && !ref.current) return;\n\n    const updatePosition = () => {\n      const scroll = ref ? (ref.current?.scrollTop ?? 0) : window.scrollY;\n      setIsScrolled(scroll > threshold);\n    };\n\n    const element: GlobalEventHandlers = ref?.current ?? window;\n    element.addEventListener(\"scroll\", updatePosition);\n\n    updatePosition();\n    return () => element.removeEventListener(\"scroll\", updatePosition);\n  }, [threshold, ref]);\n\n  return isScrolled;\n}\n","zustand/draft-store.example.tsx",{"id":221,"data":223},{"code":224},"import { create, type UseBoundStore, type StoreApi } from \"zustand\";\nimport {\n\tcreateContext,\n\tuseContext,\n\tuseRef,\n\ttype PropsWithChildren,\n} from \"react\";\nimport { useStore } from \"zustand\";\n\nexport function createDraftStore\u003CT extends object>(parentStore: StoreApi\u003CT>) {\n\tconst state = parentStore.getState();\n\tconsole.log(\"Initial state:\", state); // Let's see what we're starting with\n\n\tconst store = create\u003CT & { reset: () => void; push: () => void }>(\n\t\t(set, get) => {\n\t\t\tconst initialState = {\n\t\t\t\t...state,\n\t\t\t\treset: () => set(parentStore.getState()),\n\t\t\t\tpush: () => parentStore.setState(get()),\n\t\t\t};\n\t\t\tconsole.log(\"Created store with:\", initialState); // Verify store creation\n\t\t\treturn initialState;\n\t\t},\n\t);\n\n\t// Let's verify the store has what we expect\n\tconsole.log(\"Final store state:\", store.getState());\n\treturn store;\n}\n\nexport type CreateDraftStore\u003CT> = T extends StoreApi\u003Cinfer A>\n\t? UseBoundStore\u003CStoreApi\u003CDraftStore\u003CA>>>\n\t: T extends { useRoot: () => StoreApi\u003Cinfer A> }\n\t? UseBoundStore\u003CStoreApi\u003CDraftStore\u003CA>>>\n\t: never;\n\nexport function useCreateDraftStore\u003CT extends object>(\n\t// TODO: replace useRoot with a Symbol and look into how react determines use or change it to use__internal_root and hide the type\n\tanyParentStore: StoreApi\u003CT> | { useRoot: () => StoreApi\u003CT> },\n) {\n\tconst storeRef = useRef\u003CUseBoundStore\u003CStoreApi\u003CDraftStore\u003CT>>>>();\n\tconst parentStore =\n\t\t\"useRoot\" in anyParentStore ? anyParentStore.useRoot() : anyParentStore;\n\n\tif (!storeRef.current) {\n\t\tstoreRef.current = createDraftStore(parentStore);\n\t}\n\n\treturn storeRef.current;\n}\n\ntype Write\u003CT, U> = Omit\u003CT, keyof U> & U;\ntype DraftStore\u003CT> = Write\u003CT, { reset: () => void; push: () => void }>;\n\ntype UseStoreContext\u003CTStore> = (\u003CT = TStore>(\n\tselector?: (state: TStore) => T,\n) => T) & { useRoot: () => StoreApi\u003CTStore> };\n\nexport function createDraftStoreContext\u003CTStore extends object>(\n\tparentStore: UseStoreContext\u003CTStore>,\n) {\n\tconst StoreContext = createContext\u003CStoreApi\u003CDraftStore\u003CTStore>> | null>(null);\n\n\tconst Provider = (props: PropsWithChildren) => {\n\t\tconst storeRef = useRef\u003CStoreApi\u003CDraftStore\u003CTStore>>>();\n\t\tconst parentRootStore = parentStore.useRoot();\n\n\t\tif (!storeRef.current) {\n\t\t\tstoreRef.current = createDraftStore(parentRootStore);\n\t\t}\n\n\t\treturn \u003CStoreContext.Provider value={storeRef.current} {...props} />;\n\t};\n\n\tconst useRoot = () => {\n\t\tconst store = useContext(StoreContext);\n\t\tif (!store) {\n\t\t\tthrow new Error(\"Store hook must be used within its Provider\");\n\t\t}\n\t\treturn store;\n\t};\n\n\tconst useStoreContext = \u003CT = DraftStore\u003CTStore>>(\n\t\tselector: (state: DraftStore\u003CTStore>) => T = (state) =>\n\t\t\tstate as unknown as T,\n\t): T => useStore(useRoot(), selector);\n\n\treturn [Provider, Object.assign(useStoreContext, { useRoot })] as const;\n}\n","zustand/draft-store.tsx",{"id":225,"data":227},{"code":228},"import { create, type UseBoundStore, type StoreApi } from \"zustand\";\nimport {\n\tcreateContext,\n\tuseContext,\n\tuseRef,\n\ttype PropsWithChildren,\n} from \"react\";\nimport { useStore } from \"zustand\";\n\nexport function createDraftStore\u003CT extends object>(parentStore: StoreApi\u003CT>) {\n\tconst state = parentStore.getState();\n\tconsole.log(\"Initial state:\", state); // Let's see what we're starting with\n\n\tconst store = create\u003CT & { reset: () => void; push: () => void }>(\n\t\t(set, get) => {\n\t\t\tconst initialState = {\n\t\t\t\t...state,\n\t\t\t\treset: () => set(parentStore.getState()),\n\t\t\t\tpush: () => parentStore.setState(get()),\n\t\t\t};\n\t\t\tconsole.log(\"Created store with:\", initialState); // Verify store creation\n\t\t\treturn initialState;\n\t\t},\n\t);\n\n\t// Let's verify the store has what we expect\n\tconsole.log(\"Final store state:\", store.getState());\n\treturn store;\n}\n\nexport type CreateDraftStore\u003CT> = T extends StoreApi\u003Cinfer A>\n\t? UseBoundStore\u003CStoreApi\u003CDraftStore\u003CA>>>\n\t: T extends { useRoot: () => StoreApi\u003Cinfer A> }\n\t? UseBoundStore\u003CStoreApi\u003CDraftStore\u003CA>>>\n\t: never;\n\nexport function useCreateDraftStore\u003CT extends object>(\n\t// TODO: replace useRoot with a Symbol and look into how react determines use or change it to use__internal_root and hide the type\n\tanyParentStore: StoreApi\u003CT> | { useRoot: () => StoreApi\u003CT> },\n) {\n\tconst storeRef = useRef\u003CUseBoundStore\u003CStoreApi\u003CDraftStore\u003CT>>>>(undefined);\n\tconst parentStore =\n\t\t\"useRoot\" in anyParentStore ? anyParentStore.useRoot() : anyParentStore;\n\n\tif (!storeRef.current) {\n\t\tstoreRef.current = createDraftStore(parentStore);\n\t}\n\n\treturn storeRef.current;\n}\n\ntype Write\u003CT, U> = Omit\u003CT, keyof U> & U;\ntype DraftStore\u003CT> = Write\u003CT, { reset: () => void; push: () => void }>;\n\ntype UseStoreContext\u003CTStore> = (\u003CT = TStore>(\n\tselector?: (state: TStore) => T,\n) => T) & { useRoot: () => StoreApi\u003CTStore> };\n\nexport function createDraftStoreContext\u003CTStore extends object>(\n\tparentStore: UseStoreContext\u003CTStore>,\n) {\n\tconst StoreContext = createContext\u003CStoreApi\u003CDraftStore\u003CTStore>> | null>(null);\n\n\tconst Provider = (props: PropsWithChildren) => {\n\t\tconst storeRef = useRef\u003CStoreApi\u003CDraftStore\u003CTStore>>>(undefined);\n\t\tconst parentRootStore = parentStore.useRoot();\n\n\t\tif (!storeRef.current) {\n\t\t\tstoreRef.current = createDraftStore(parentRootStore);\n\t\t}\n\n\t\treturn \u003CStoreContext.Provider value={storeRef.current} {...props} />;\n\t};\n\n\tconst useRoot = () => {\n\t\tconst store = useContext(StoreContext);\n\t\tif (!store) {\n\t\t\tthrow new Error(\"Store hook must be used within its Provider\");\n\t\t}\n\t\treturn store;\n\t};\n\n\tconst useStoreContext = \u003CT = DraftStore\u003CTStore>>(\n\t\tselector: (state: DraftStore\u003CTStore>) => T = (state) =>\n\t\t\tstate as unknown as T,\n\t): T => useStore(useRoot(), selector);\n\n\treturn [Provider, Object.assign(useStoreContext, { useRoot })] as const;\n}\n","zustand/provider.example.tsx",{"id":229,"data":231},{"code":232},"import { create } from \"zustand\";\nimport { combine } from \"zustand/middleware\";\nimport { createStoreContext } from \"./provider\";\n\nconst [BearStoreProvider, useBearStore] = createStoreContext(\n  ({ defaultBears: bears = 0 }: { defaultBears?: number }) =>\n    create(\n      combine({ bears }, (set, get) => ({\n        addABear: () => set({ bears: get().bears + 1 }),\n      })),\n    ),\n);\n\nfunction Component() {\n  return (\n    \u003CBearStoreProvider defaultBears={5}>\n      \u003CChildComponent />\n    \u003C/BearStoreProvider>\n  );\n}\n\nfunction ChildComponent() {\n  const bears = useBearStore((state) => state.bears);\n  const addABear = useBearStore((state) => state.addABear);\n\n  return (\n    \u003Cdiv>\n      \u003Cspan>{bears}\u003C/span>\n      \u003Cbutton type=\"button\" onClick={addABear}>\n        Add\n      \u003C/button>\n    \u003C/div>\n  );\n}\n","zustand/provider.tsx",{"id":233,"data":235},{"code":236},"\"use client\";\n\nimport {\n  createContext,\n  useContext,\n  useRef,\n  type PropsWithChildren,\n} from \"react\";\nimport { useStore, type StoreApi } from \"zustand\";\n\ntype ProviderProps\u003CTParams> = PropsWithChildren\u003CTParams>;\n\nexport function createStoreContext\u003C\n  TStore extends object,\n  TParams = { store: StoreApi\u003CTStore> },\n>(\n  createStore: (params: TParams) => StoreApi\u003CTStore> = (({\n    store,\n  }: { store: StoreApi\u003CTStore> }) => store) as unknown as (\n    params: TParams,\n  ) => StoreApi\u003CTStore>,\n) {\n  const StoreContext = createContext\u003CStoreApi\u003CTStore> | null>(null);\n\n  const Provider = ({ children, ...params }: ProviderProps\u003CTParams>) => {\n    const storeRef = useRef\u003CStoreApi\u003CTStore>>(createStore(params as TParams));\n\n    return (\n      \u003CStoreContext.Provider value={storeRef.current}>\n        {children}\n      \u003C/StoreContext.Provider>\n    );\n  };\n\n  const useRoot = () => {\n    const store = useContext(StoreContext);\n    if (!store) {\n      throw new Error(\"Store hook must be used within its Provider\");\n    }\n    return store;\n  };\n\n  const useStoreContext = \u003CT = TStore>(\n    selector: (state: TStore) => T = (state) => state as unknown as T,\n  ): T => useStore(useRoot(), selector);\n\n  return [Provider, Object.assign(useStoreContext, { useRoot })] as const;\n}\n","zustand/superjson.example.ts",{"id":237,"data":239},{"code":240},"import { create } from \"zustand\";\nimport { combine, persist } from \"zustand/middleware\";\nimport { createSuperJSONStorage } from \"./superjson\";\n\nexport const useBearStore = create(\n  persist(\n    combine({ bears: 0 }, (set, get) => ({\n      addABear: () => set({ bears: get().bears + 1 }),\n    })),\n    {\n      name: \"food-storage\", // name of the item in the storage (must be unique)\n      storage: createSuperJSONStorage(() => sessionStorage), // (optional) by default, 'localStorage' is used\n    },\n  ),\n);\n","zustand/superjson.ts",{"id":241,"data":243},{"code":244},"import superjson from \"superjson\";\nimport type { PersistStorage } from \"zustand/middleware\";\n\nexport const createSuperJSONStorage = \u003CT>(\n  getStorage: () => Storage = () => localStorage,\n): PersistStorage\u003CT> => ({\n  getItem: (name) => {\n    const str = getStorage().getItem(name);\n    if (!str) return null;\n    return superjson.parse(str);\n  },\n  setItem: (name, value) =>\n    getStorage().setItem(name, superjson.stringify(value)),\n  removeItem: getStorage().removeItem,\n});\n","zustand/url.example.ts",{"id":245,"data":247},{"code":248},"import { create } from \"zustand\";\nimport { combine, persist } from \"zustand/middleware\";\nimport { createURLStorage } from \"./url\";\nimport { z } from \"zod\";\n\nconst BearsSchema = z.object({\n  bears: z.number(),\n});\n\nexport const useBearStore = create(\n  persist(\n    combine({ bears: 0 } satisfies z.infer\u003Ctypeof BearsSchema>, (set, get) => ({\n      addABear: () => set({ bears: get().bears + 1 }),\n    })),\n    {\n      name: \"food-storage\", // name of the item in the storage (must be unique)\n      storage: createURLStorage(BearsSchema), // zod schema\n    },\n  ),\n);\n","zustand/url.ts",{"id":249,"data":251},{"code":252},"import type { z } from \"zod\";\nimport type { PersistStorage } from \"zustand/middleware\";\nimport {\n  createStateDeserializer,\n  createStateSerializer,\n  type SerializeOptions,\n} from \"../state-serialization\";\n\nexport const createURLStorage = \u003CT>(\n  schema: z.ZodType\u003CT>,\n  options?: Omit\u003CSerializeOptions\u003CT>, \"paramName\">,\n): PersistStorage\u003CT> => {\n  const { createString } = createStateSerializer(schema);\n  const { fromString } = createStateDeserializer(schema);\n\n  return {\n    getItem(name) {\n      if (typeof window === \"undefined\") return null;\n\n      const params = new URLSearchParams(window.location.search);\n      const param = params.get(name);\n\n      if (!param) return null;\n\n      const result = fromString(param);\n      if (!result.success) return null;\n\n      return { state: result.data };\n    },\n\n    setItem(name, value) {\n      if (typeof window === \"undefined\") return;\n\n      const url = new URL(window.location.href);\n      const stringified = createString(value.state, options);\n      url.searchParams.set(name, stringified);\n      window.history.replaceState(null, \"\", url);\n    },\n\n    removeItem(name) {\n      if (typeof window === \"undefined\") return;\n\n      const url = new URL(window.location.href);\n      url.searchParams.delete(name);\n      window.history.replaceState(null, \"\", url.toString());\n    },\n  };\n};\n"]